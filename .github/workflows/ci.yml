---
name: CI

on:
  push:
    branches:
      - master
    tags:
      - "v*"
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      use_cache:
        description: "Use build cache"
        required: true
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_OKTOMUSIC: ${{ github.repository_owner }}/oktomusic
  IMAGE_NAME_WEBSITE: ${{ github.repository_owner == 'oktomusic' && 'oktomusic/website' || format('{0}/oktomusic-website', github.repository_owner) }}

jobs:
  app-backend:
    name: "@oktomusic/backend"
    runs-on: ubuntu-latest
    needs:
      - pkg-lyrics
      - pkg-api-schemas
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build @oktomusic/api-schemas
        run: pnpm --filter "@oktomusic/api-schemas" build

      - name: Prisma generate
        run: pnpm --filter "@oktomusic/backend" run db:generate

      - name: Build
        run: pnpm --filter "@oktomusic/backend" build

      - name: Lint
        run: |
          pnpm --filter "@oktomusic/backend" run lint

      - name: Tests
        run: |
          pnpm --filter "@oktomusic/backend" run test

  app-frontend:
    name: "@oktomusic/frontend"
    runs-on: ubuntu-latest
    needs:
      - pkg-vite-sri-manifest
      - pkg-lyrics
      - pkg-api-schemas
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build @oktomusic/vite-sri-manifest
        run: pnpm --filter "@oktomusic/vite-sri-manifest" build

      - name: Build @oktomusic/api-schemas
        run: pnpm --filter "@oktomusic/api-schemas" build

      - name: Build
        run: pnpm --filter "@oktomusic/frontend" build

      - name: Lint
        run: |
          pnpm --filter "@oktomusic/frontend" run lint

      - name: Tests
        run: |
          pnpm --filter "@oktomusic/frontend" run test

  pkg-vite-sri-manifest:
    name: "@oktomusic/vite-sri-manifest"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build
        run: pnpm --filter "@oktomusic/vite-sri-manifest" build

      - name: Lint
        run: |
          pnpm --filter "@oktomusic/vite-sri-manifest" run lint

  pkg-lyrics:
    name: "@oktomusic/lyrics"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build
        run: pnpm --filter "@oktomusic/lyrics" build

      - name: Lint
        run: |
          pnpm --filter "@oktomusic/lyrics" run lint

  pkg-api-schemas:
    name: "@oktomusic/api-schemas"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build
        run: pnpm --filter "@oktomusic/api-schemas" build

      - name: Lint
        run: |
          pnpm --filter "@oktomusic/api-schemas" run lint

  website:
    name: "@oktomusic/website"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build website
        run: pnpm --filter "@oktomusic/website" run build

  deploy-website:
    name: Deploy Website
    runs-on: ubuntu-latest
    needs: website
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build website
        run: pnpm --filter "@oktomusic/website" run build

      - name: Build & Deploy Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./apps/website/.vitepress/dist --project-name=oktomusic
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  docker-website:
    name: Docker Website
    runs-on: ubuntu-latest
    needs: website
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Docker
        uses: ./.github/actions/setup-docker
        with:
          login: ${{ github.event_name != 'pull_request' }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          cosign: ${{ github.event_name != 'pull_request' }}

      - name: Build Docker image
        uses: ./.github/actions/build-docker
        with:
          registry: ${{ env.REGISTRY }}
          image_name: ${{ env.IMAGE_NAME_WEBSITE }}
          context: .
          dockerfile: apps/website/Dockerfile
          # io.artifacthub.package.logo-url=
          annotations: |
            org.opencontainers.image.title=Oktomusic Website
            org.opencontainers.image.description=Music streaming server
            org.opencontainers.image.authors=AFCMS <afcm.contact@gmail.com>
            org.opencontainers.image.licenses=AGPL-3.0-only
            org.opencontainers.image.source=https://github.com/oktomusic/oktomusic
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/oktomusic/oktomusic/refs/heads/master/docs/artifacthub/website.md
            io.artifacthub.package.category=skip-prediction
            io.artifacthub.package.keywords=website
            io.artifacthub.package.license=AGPL-3.0-only
            io.artifacthub.package.maintainers=[{"name":"AFCMS","email":"afcm.contact@gmail.com"}]
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7,linux/ppc64le,linux/riscv64,linux/s390x
          push: ${{ github.event_name != 'pull_request' }}
          no_cache: ${{ (github.event_name == 'workflow_dispatch' && !inputs.use_cache) || startsWith(github.ref, 'refs/tags/') }}
          attestations: ${{ github.event_name != 'pull_request' }}
          cosign: ${{ github.event_name != 'pull_request' }}

  docker-oktomusic:
    name: Docker Oktomusic
    runs-on: ubuntu-latest
    needs:
      - app-backend
      - app-frontend
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Docker
        uses: ./.github/actions/setup-docker
        with:
          login: ${{ github.event_name != 'pull_request' }}
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          cosign: ${{ github.event_name != 'pull_request' }}

      - name: Build Docker image
        uses: ./.github/actions/build-docker
        with:
          registry: ${{ env.REGISTRY }}
          image_name: ${{ env.IMAGE_NAME_OKTOMUSIC }}
          context: .
          dockerfile: Dockerfile
          # io.artifacthub.package.logo-url=
          annotations: |
            org.opencontainers.image.title=Oktomusic
            org.opencontainers.image.description=Music streaming server
            org.opencontainers.image.authors=AFCMS <afcm.contact@gmail.com>
            org.opencontainers.image.licenses=AGPL-3.0-only
            org.opencontainers.image.source=https://github.com/oktomusic/oktomusic
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/oktomusic/oktomusic/refs/heads/master/docs/artifacthub/container.md
            io.artifacthub.package.category=skip-prediction
            io.artifacthub.package.keywords=music,server,streaming
            io.artifacthub.package.license=AGPL-3.0-only
            io.artifacthub.package.maintainers=[{"name":"AFCMS","email":"afcm.contact@gmail.com"}]
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          no_cache: ${{ (github.event_name == 'workflow_dispatch' && !inputs.use_cache) || startsWith(github.ref, 'refs/tags/') }}
          attestations: ${{ github.event_name != 'pull_request' }}
          cosign: ${{ github.event_name != 'pull_request' }}
