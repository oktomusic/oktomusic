---
name: CI

on:
  push:
    branches:
      - master
    tags:
      - "v*"
  pull_request:
    branches:
      - master
  workflow_dispatch:
    inputs:
      use_cache:
        description: "Use build cache"
        required: true
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_WEBSITE: ${{ github.repository_owner == 'oktomusic' && 'oktomusic/website' || format('{0}/oktomusic-website', github.repository_owner) }}

jobs:
  app-backend:
    name: "@oktomusic/backend"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build
        run: pnpm --filter "@oktomusic/backend" build

      - name: Lint
        run: |
          pnpm --filter "@oktomusic/backend" run lint

      - name: Tests
        run: |
          pnpm --filter "@oktomusic/backend" run test

  app-frontend:
    name: "@oktomusic/frontend"
    runs-on: ubuntu-latest
    needs: pkg-vite-sri-manifest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build @oktomusic/vite-sri-manifest
        run: pnpm --filter "@oktomusic/vite-sri-manifest" build

      - name: Build
        run: pnpm --filter "@oktomusic/frontend" build

      - name: Lint
        run: |
          pnpm --filter "@oktomusic/frontend" run lint

      - name: Tests
        run: |
          pnpm --filter "@oktomusic/frontend" run test

  pkg-vite-sri-manifest:
    name: "@oktomusic/vite-sri-manifest"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build
        run: pnpm --filter "@oktomusic/vite-sri-manifest" build

      - name: Lint
        run: |
          pnpm --filter "@oktomusic/vite-sri-manifest" run lint

  pkg-lyrics:
    name: "@oktomusic/lyrics"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build
        run: pnpm --filter "@oktomusic/lyrics" build

      - name: Lint
        run: |
          pnpm --filter "@oktomusic/lyrics" run lint

  website:
    name: "@oktomusic/website"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build website
        run: pnpm --filter "@oktomusic/website" run build

  deploy-website:
    name: Deploy Website
    runs-on: ubuntu-latest
    needs: website
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Environment
        uses: ./.github/actions/setup-environment

      - name: Build website
        run: pnpm --filter "@oktomusic/website" run build

      - name: Build & Deploy Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ./apps/website/.vitepress/dist --project-name=oktomusic
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  docker-website:
    name: Docker Website
    runs-on: ubuntu-latest
    needs: website
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEBSITE }}
          # io.artifacthub.package.logo-url=
          labels: |
            org.opencontainers.image.title=Oktomusic Website
            org.opencontainers.image.description=Music streaming server
            org.opencontainers.image.authors=AFCMS <afcm.contact@gmail.com>
            org.opencontainers.image.licenses=AGPL-3.0-only
            org.opencontainers.image.source=https://github.com/oktomusic/oktomusic
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/oktomusic/oktomusic/refs/heads/master/README.md
            io.artifacthub.package.category=skip-prediction
            io.artifacthub.package.keywords=website
            io.artifacthub.package.license=AGPL-3.0-only
            io.artifacthub.package.maintainers=[{"name":"AFCMS","email":"afcm.contact@gmail.com"}]
          annotations: |
            org.opencontainers.image.title=Oktomusic Website
            org.opencontainers.image.description=Music streaming server
            org.opencontainers.image.authors=AFCMS <afcm.contact@gmail.com>
            org.opencontainers.image.licenses=AGPL-3.0-only
            org.opencontainers.image.source=https://github.com/oktomusic/oktomusic
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/oktomusic/oktomusic/refs/heads/master/README.md
            io.artifacthub.package.category=skip-prediction
            io.artifacthub.package.keywords=website
            io.artifacthub.package.license=AGPL-3.0-only
            io.artifacthub.package.maintainers=[{"name":"AFCMS","email":"afcm.contact@gmail.com"}]

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: apps/website/Dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7,linux/ppc64le,linux/riscv64,linux/s390x
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          no-cache: ${{ (github.event_name == 'workflow_dispatch' && !inputs.use_cache) || startsWith(github.ref, 'refs/tags/') }}

      - name: Attest Build Provenance
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_WEBSITE }}
          subject-digest: ${{ steps.build-and-push.outputs.digest }}
          push-to-registry: false

      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@v3

      - name: Check cosign installation
        if: github.event_name != 'pull_request'
        run: cosign version

      - name: Sign the images with GitHub OIDC Token
        if: github.event_name != 'pull_request'
        env:
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
